plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.openapi.generator' version '7.0.1'
}

apply plugin: 'org.openapi.generator'

group = 'com.example.orderservice'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "2024.0.0-RC1")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.h2database:h2'

	//openapi documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

	// for micrometer metrics
	// runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'io.micrometer:micrometer-registry-otlp'

	//for micrometer distributed tracing using opentelemetry
	runtimeOnly 'io.micrometer:micrometer-tracing-bridge-otel'
	runtimeOnly 'io.opentelemetry:opentelemetry-exporter-otlp'

	//for resilience4j
	implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'io.github.resilience4j:resilience4j-micrometer'

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}


task ecomBuild(type: GradleBuild) {
	group = 'ecommerce'
	description = 'Cleans, generates OpenAPI resources, and builds.'
	tasks = ['clean','codegenPaymentService', 'build']
}

task codegenPaymentService(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	group = "ecommerce"
	generatorName = "java"
	inputSpec = "$rootDir/src/main/resources/swagger/payment-service.json".toString()
	outputDir = "$rootDir/generated".toString()
	apiPackage = "com.example.apps.paymentservice.api"
	modelPackage = "com.example.apps.paymentservice.model"
	library = "resttemplate"
	generateModelTests = false
	generateApiTests = false
	validateSpec = false
	configOptions = [
			dateLibrary      : "java22",
			useResponseEntity: "false",
			openApiNullable: "false",
			useJakartaEe: "true",
			additionalModelTypeAnnotations: "@lombok.Builder\n@lombok.AllArgsConstructor"
	]
}

tasks.named('compileJava') {
	mustRunAfter tasks.named('codegenPaymentService')
}

build.dependsOn codegenPaymentService

sourceSets {
	main {
		java {
			srcDirs 'generated/src/main/java'
			srcDirs 'src/main/java'
		}
	}
}